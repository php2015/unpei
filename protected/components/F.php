<?php/* * To change this template, choose Tools | Templates * and open the template in the editor. */class F {    //公司帐号    private static $SpCode = '215259';   //短信接口公司编号       private static $LoginName = 'bj_jpkj';   //用户名    private static $Password = 'gs2001';   //密码    static public function hello() {        echo 'hello';    }    static public function rand_color() {        static $d;        for ($a = 0; $a < 6; $a++) { //采用#FFFFFF方法，            $d .= dechex(rand(0, 15)); //累加随机的数据--dechex()将十进制改为十六进制        }        return '#' . $d;    }    /**     * 语言翻译     * @param $message     * @param string $category     * @param array $params     * @param null $source     * @param null $language     * @return string     */    static public function t($message, $category = 'frontend', $params = array(), $source = null, $language = null) {        return Yii::t($category, $message, $params, $source, $language);        //t('hello','xx');xx是语言包    }    /**     * 字符串截取，支持中文和其他编码     * @param $str 需要转换的字符串     * @param int $start 开始位置     * @param $length 截取长度     * @param string $charset 编码格式     * @param bool $suffix 截断显示字符     * @return string     */    static public function msubstr($str, $start = 0, $length = 12, $charset = "utf-8", $suffix = true) {        return "<a title='" . $str . "' class='text-omit'>$str</a>";        if (function_exists("mb_substr")) {            $slice = mb_substr($str, $start, $length, $charset);            if ($suffix && $slice . length < $str . length) {                $slice .= "&nbsp;<b>...</b>";                $slice = "<a title='" . $str . "' class='text-omit'>$slice</a>";            }            return $slice;        } else if (function_exists('iconv_substr')) {            return 'iconv_substr';            $slice = iconv_substr($str, $start, $length, $charset);            if ($suffix && $slice . length < $str . length) {                $slice .= "&nbsp;<b>...</b>";                $slice = "<a title='" . $str . "' class='text-omit'>$slice</a>";            }            return $slice;        }        $re['utf-8'] = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/";        $re['gb2312'] = "/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/";        $re['gbk'] = "/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/";        $re['big5'] = "/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/";        preg_match_all($re[$charset], $str, $match);        $slice = join("", array_slice($match[0], $start, $length));        if ($suffix) {            $slice .= "…";            $slice = "<a title='" . $str . "' class='text-omit'>$slice</a>";        }        return $slice;    }    //按日期生成目录    static public function do_mkdir($day_file, $path) {        $dir_array = explode("-", $day_file);        if (count($dir_array) == 3) {            $dir_1 = $path . '/' . $dir_array[0];            $dir_2 = $dir_1 . "/" . $dir_array[1];            $dir_3 = $dir_2 . "/" . $dir_array[2];            $dir_file_array = array($dir_1, $dir_2, $dir_3);            $dir_file_array = array();            $dir_str = $path . '/';            for ($i = 0; $i < count($dir_array); $i++) {                $dir_str .= $dir_array[$i] . "/";                array_push($dir_file_array, $dir_str);            }            for ($i = 0; $i < count($dir_file_array); $i++) {                $dir_file = $dir_file_array[$i];                if (file_exists($dir_file)) {                    continue;                } else {//                    echo $dir_file;//                    exit;                    mkdir($dir_file, 0777);                    chmod($dir_file, 0777);                }            }            return $dir_file_array[count($dir_file_array) - 1];        } else {            echo "error!!!!!!!!!";            exit;        }    }    /**     * 得到新订单号     * @return  string     */    static public function get_order_id() {        /* 选择一个随机的方案 */        mt_srand((double) microtime() * 1000000);        return date('Ymd') . str_pad(mt_rand(1, 999999), 6, '0', STR_PAD_LEFT);    }    /**     * 为上传文件生成随机名称     * @return  string     */    static public function random_filename() {        return date("YmdHis") . '_' . rand(10000, 99999);        ;    }    static public function script($file) {        Yii::app()->getClientScript()->registerScriptFile($file);    }    /**     * 直接写script     * @param $id     * @param $script     */    static public function rgScript($id, $script) {        Yii::app()->getClientScript()->registerScript($id, $script);    }    static public function check2Array($array) {        foreach ($array as $k => $v) {            if (is_array($v)) {                return true;            }        }        return false;    }    /**     * check file     * @param $url     * @return bool     */    static public function isfile($url) {        static $isfilestr;        $isfile = get_headers($url);        foreach ($isfile as $str) {            $isfilestr .= $str;        }        $pos = strpos($isfilestr, "Content-Type: image/");        if ($pos > 0) {            $result = true;        } else {            $result = false;        }        return $result;    }    /* set a flash message to display after the request is done */    static public function setFlash($message) {        Yii::app()->user->setFlash('mysite', $message);    }    static public function hasFlash() {        return Yii::app()->user->hasFlash('mysite');    }    /* retrieve the flash message again */    static public function getFlash() {        if (Yii::app()->user->hasFlash('mysite')) {            return Yii::app()->user->getFlash('mysite');        }    }    static public function renderFlash() {        if (Yii::app()->user->hasFlash('mysite')) {            echo '<div class="errorSummary">';            echo F::getFlash();            echo '</div>';            Yii::app()->clientScript->registerScript('fade', "setTimeout(function() { $('.errorSummary').fadeOut('slow'); }, 5000);	");        }    }    /**     * 无限级分类，显示     * @$arr 数组     * @$id id     * @$show_curent 是否显示当然分类     * @$pid 分类上级id     * @$name 显示名     */    static public function toTree($arr, $selected = '', $id = 'id', $pid = 'pid', $name = 'title', $span = 1) {        static $str;        foreach ($arr as $rs) {            if ($rs->$pid == 0) {                if ($selected == $rs->$id)                    $select = "selected='selected'";                $str .= "<option value='" . $rs->$id . "' $select >" . F::t($rs->$name) . "</option>";                $str .= self::toTreeHelper($arr, $selected, $rs->$id, $pid, $id, $name, $span);            }        }        return $str;    }    //辅助生成tree    static public function toTreeHelper($arr, $selected, $value, $pid, $id, $name, $span) {        static $string;        static $str;        $array = array();        for ($i = 0; $i < $span; $i++) {            $string .= '&nbsp;&nbsp;&nbsp;&nbsp;';        }        foreach ($arr as $rs) {            if ($value == $rs->$pid) {                if ($selected == $rs->$id)                    $select = "selected='selected'";                $str .= "<option value='" . $rs->$id . "' $select>" . $string . F::t($rs->$name) . "</option>";                if (self::toTreeHelper($arr, $selected, $rs->$id, $pid, $id, $name, $span))                    $str .= self::toTreeHelper($arr, $selected, $rs->$id, $pid, $id, $name, $span + 1);            }        }        return $str;    }    /**     * 多维数组 转成一维数组     * @param $array     * @return array     */    static public function array_values_one($array) {        static $span;        $arrayValues = array();        $i = 0;        foreach ($array as $key => $value) {            if (is_scalar($value) or is_resource($value)) {                $arrayValues[$key] = $span . $value;            } elseif (is_array($value)) {                $arrayValues = array_merge($arrayValues, self::array_values_one($value));            }        }        return $arrayValues;    }    /**     * 函数名： deleteDir     * 功 能： 递归地删除指定目录     * 参 数： $dir 目录     * 返回值： 无     */    static public function deleteDir($dir) {        if ($items = glob($dir . "/*")) {            foreach ($items as $obj) {                is_dir($obj) ? deleteDir($obj) : unlink($obj);            }        }        rmdir($dir);    }    function listFile($dir) {        $fileArray = array();        $cFileNameArray = array();        if ($handle = opendir($dir)) {            while (($file = readdir($handle)) !== false) {                if ($file != "." && $file != "..") {                    if (is_dir($dir . "\\" . $file)) {                        $cFileNameArray = self::listFile($dir . "\\" . $file);                        for ($i = 0; $i < count($cFileNameArray); $i++) {                            $fileArray[] = $cFileNameArray[$i];                        }                    } else {                        $fileArray[] = $file;                    }                }            }            return $fileArray;        } else {            echo "listFile出错了";        }    }    //以下四个函数为必须函数。    static public function sub($content, $maxlen = 300, $show = false, $f = '……') {        //把字符按HTML标签变成数组。        $content = preg_split("/(<[^>]+?>)/si", $content, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);        $wordrows = 0; //中英字数        $outstr = ""; //生成的字串        $wordend = false; //是否符合最大的长度        $beginTags = 0; //除<img><br><hr>这些短标签外，其它计算开始标签，如<div*>        $endTags = 0; //计算结尾标签，如</div>，如果$beginTags==$endTags表示标签数目相对称，可以退出循环。        //print_r($content);        foreach ($content as $value) {            if (trim($value) == "")                continue; //如果该值为空，则继续下一个值            if (strpos(";$value", "<") > 0) {                //如果与要载取的标签相同，则到处结束截取。                if (trim($value) == $maxlen) {                    $wordend = true;                    continue;                }                if ($wordend == false) {                    $outstr .= $value;                    if (!preg_match("/<img([^>]+?)>/is", $value) && !preg_match("/<param([^>]+?)>/is", $value) && !preg_match("/<!([^>]+?)>/is", $value) && !preg_match("/<br([^>]+?)>/is", $value) && !preg_match("/<hr([^>]+?)>/is", $value)) {                        $beginTags++; //除img,br,hr外的标签都加1                    }                } elseif (preg_match("/<\/([^>]+?)>/is", $value, $matches)) {                    $endTags++;                    $outstr .= $value;                    if ($beginTags == $endTags && $wordend == true)                        break; //字已载完了，并且标签数相称，就可以退出循环。                } else {                    if (!preg_match("/<img([^>]+?)>/is", $value) && !preg_match("/<param([^>]+?)>/is", $value) && !preg_match("/<!([^>]+?)>/is", $value) && !preg_match("/<br([^>]+?)>/is", $value) && !preg_match("/<hr([^>]+?)>/is", $value)) {                        $beginTags++; //除img,br,hr外的标签都加1                        $outstr .= $value;                    }                }            } else {                if (is_numeric($maxlen)) { //截取字数                    $curLength = self::getStringLength($value);                    $maxLength = $curLength + $wordrows;                    if ($wordend == false) {                        if ($maxLength > $maxlen) { //总字数大于要截取的字数，要在该行要截取                            $outstr .= self::subString($value, 0, $maxlen - $wordrows);                            $wordend = true;                        } else {                            $wordrows = $maxLength;                            $outstr .= $value;                        }                    }                } else {                    if ($wordend == false)                        $outstr .= $value;                }            }        }        //循环替换掉多余的标签，如<p></p>这一类        while (preg_match("/<([^\/][^>]*?)><\/([^>]+?)>/is", $outstr)) {            $outstr = preg_replace_callback("/<([^\/][^>]*?)><\/([^>]+?)>/is", "strip_empty_html", $outstr);        }        //把误换的标签换回来        if (strpos(";" . $outstr, "[html_") > 0) {            $outstr = str_replace("[html_&lt;]", "<", $outstr);            $outstr = str_replace("[html_&gt;]", ">", $outstr);        }        //echo htmlspecialchars($outstr);        if (true == $show && true == $wordend) {            $outstr .= $f;        }        return $outstr;    }    //取得字符串的长度，包括中英文。    static public function getStringLength($text) {        if (function_exists('mb_substr')) {            $length = mb_strlen($text, 'UTF-8');        } elseif (function_exists('iconv_substr')) {            $length = iconv_strlen($text, 'UTF-8');        } else {            preg_match_all("/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf]/", $text, $ar);            $length = count($ar[0]);        }        return $length;    }    /*     * *********按一定长度截取字符串（包括中文）******** */    static public function subString($text, $start = 0, $limit = 12) {        if (function_exists('mb_substr')) {            $more = (mb_strlen($text, 'UTF-8') > $limit) ? TRUE : FALSE;            $text = mb_substr($text, 0, $limit, 'UTF-8');            return $text;        } elseif (function_exists('iconv_substr')) {            $more = (iconv_strlen($text, 'UTF-8') > $limit) ? TRUE : FALSE;            $text = iconv_substr($text, 0, $limit, 'UTF-8');            //return array($text, $more);            return $text;        } else {            preg_match_all("/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|[\xe1-\xef][\x80-\xbf][\x80-\xbf]|\xf0[\x90-\xbf][\x80-\xbf][\x80-\xbf]|[\xf1-\xf7][\x80-\xbf][\x80-\xbf][\x80-\xbf]/", $text, $ar);            if (func_num_args() >= 3) {                if (count($ar[0]) > $limit) {                    $more = TRUE;                    $text = join("", array_slice($ar[0], 0, $limit));                } else {                    $more = FALSE;                    $text = join("", array_slice($ar[0], 0, $limit));                }            } else {                $more = FALSE;                $text = join("", array_slice($ar[0], 0));            }            return $text;        }    }    //去掉多余的空标签    static public function strip_empty_html($matches) {        $arr_tags1 = explode(" ", $matches[1]);        if ($arr_tags1[0] == $matches[2]) { //如果前后标签相同，则替换为空。            return "";        } else {            $matches[0] = str_replace("<", "[html_&lt;]", $matches[0]);            $matches[0] = str_replace(">", "[html_&gt;]", $matches[0]);            return $matches[0];        }    }    /**     * 获得当前格林威治时间的时间戳     *     * @return  integer     */    static public function gmtime() {        return (time() - date('Z'));    }    /**     * 将XML对象转换成数组     * @param $xml     * @return array     */    static public function xml_to_array($xml) {        $res = array();        foreach ($xml as $key => $value) {            if (count($value) >= 1) {                isset($keys[$key]) ? ($keys[$key] += 1) : ($keys[$key] = 1);                if ($keys[$key] == 1)                    $res[$key] = to_array($value);                elseif ($keys[$key] == 2)                    $res[$key] = array($res[$key], to_array($value));                else                    $res[$key][] = to_array($value);            } else {                $res[$key] = (string) $value;            }        }        return $res;    }    /**     * usage:     * F::sg('site', 'name');     * Shortcut for Yii::app()->settings->get();     * @param $category     * @param $key     * @return mixed     */    static public function sg($category, $key) {        // 先去setting表中查找        $value = Yii::app()->settings->get($category, $key);        if ((is_null($value) || trim($value) === '') && $category == 'cache' && $key != 'defaultCachingDuration') {            $value = Yii::app()->settings->get($category, 'defaultCachingDuration');        }        // 如果数据为空，再 去params配置文件中查找        if (is_null($value) || trim($value) === '') {            $value = Yii::app()->params[$category][$key];            if ((is_null($value) || trim($value) === '') && $category == 'cache' && $key != 'defaultCachingDuration') {                $value = Yii::app()->params[$category]['defaultCachingDuration'];            }        }        return $value;    }    /**     * Transforms the responseobject to an array     * @param object $object     * @return array An arrayrepresentation of the given object     */    static public function objectToArray($object) {        $out = array();        foreach ($object as $key => $value) {            switch (true) {                case is_object($value):                    $out[$key] = SELF::objectToArray($value);                    break;                case is_array($value):                    $out[$key] = SELF::objectToArray($value);                    break;                default:                    $out[$key] = $value;                    break;            }        }        return $out;    }    static public function jquery() {        Yii::app()->clientScript->registerCoreScript('jquery');    }    /**     * Theme url     */    static public function themeUrl() {        $uri = Yii::app()->theme->baseUrl;        return $uri;    }    /**     * Base url     */    static public function baseUrl() {        $uri = Yii::app()->request->baseUrl;        return $uri;    }    /**     * Base Path     */    static public function basePath() {        $uri = Yii::app()->basePath;        return $uri;    }    /**     * Upload url     */    static public function uploadUrl() {        if (Yii::app()->getParams()->ftpserver['visiturl'] ) {            return Yii::app()->getParams()->ftpserver['visiturl'] ;        }        $uri = Yii::app()->baseUrl . '/upload/';        return $uri;    }    /**     * date i18n     * @param $date     * @param string $dateWidth     * @param string $timeWidth     * @return string     */    static public function date($date, $dateWidth = 'medium', $timeWidth = 'medium') {        $format = new CDateFormatter(Yii::app()->translate->getLanguage());        return $format->formatDateTime($date, $dateWidth, $timeWidth);    }    /**     * PHP判断字符串纯汉字 OR 纯英文 OR 汉英混合     * @param $str     * @return string     */    static public function utf8_str($str) {        $mb = mb_strlen($str, 'utf-8');        $st = strlen($str);        if ($st == $mb)            return '1'; //纯英文        if ($st % $mb == 0 && $st % 3 == 0)            return '2'; //纯汉字        return '3'; //汉英混合    }    public static function convert_props_js_id($string) {        $json = CJSON::decode($string);        $result = implode("_", $json);        return $result;    }    public static function strip_prop_strto_csv($str) {        $string = str_replace(":", "#cln#", $str);        $string = str_replace(";", "#scln#", $string);        return $string;    }    public static function strip_prop_csvto_string($str) {        $string = str_replace("#cln#", ":", $str);        $string = str_replace("#scln#", ";", $string);        return $string;    }    /**     * dump 10 lvl     * @param $target     */    public static function dump($target) {        return CVarDumper::dump($target, 10, true);    }    /**     * generate password     * @param int $length     * @return string     */    public static function generatePassword($length = 8) {        $chars = array_merge(range(0, 9), range('a', 'z'), range('A', 'Z'), array('!', '@', '$', '%', '^', '&', '*'));        shuffle($chars);        $password = '';        for ($i = 0; $i < $length; $i++) {            $password .= $chars[$i];        }        return $password;    }    public static function Pinyin($_String, $_Code = 'UTF8') { //GBK页面可改为gb2312，其他随意填写为UTF8        $_DataKey = "a|ai|an|ang|ao|ba|bai|ban|bang|bao|bei|ben|beng|bi|bian|biao|bie|bin|bing|bo|bu|ca|cai|can|cang|cao|ce|ceng|cha" .                "|chai|chan|chang|chao|che|chen|cheng|chi|chong|chou|chu|chuai|chuan|chuang|chui|chun|chuo|ci|cong|cou|cu|" .                "cuan|cui|cun|cuo|da|dai|dan|dang|dao|de|deng|di|dian|diao|die|ding|diu|dong|dou|du|duan|dui|dun|duo|e|en|er" .                "|fa|fan|fang|fei|fen|feng|fo|fou|fu|ga|gai|gan|gang|gao|ge|gei|gen|geng|gong|gou|gu|gua|guai|guan|guang|gui" .                "|gun|guo|ha|hai|han|hang|hao|he|hei|hen|heng|hong|hou|hu|hua|huai|huan|huang|hui|hun|huo|ji|jia|jian|jiang" .                "|jiao|jie|jin|jing|jiong|jiu|ju|juan|jue|jun|ka|kai|kan|kang|kao|ke|ken|keng|kong|kou|ku|kua|kuai|kuan|kuang" .                "|kui|kun|kuo|la|lai|lan|lang|lao|le|lei|leng|li|lia|lian|liang|liao|lie|lin|ling|liu|long|lou|lu|lv|luan|lue" .                "|lun|luo|ma|mai|man|mang|mao|me|mei|men|meng|mi|mian|miao|mie|min|ming|miu|mo|mou|mu|na|nai|nan|nang|nao|ne" .                "|nei|nen|neng|ni|nian|niang|niao|nie|nin|ning|niu|nong|nu|nv|nuan|nue|nuo|o|ou|pa|pai|pan|pang|pao|pei|pen" .                "|peng|pi|pian|piao|pie|pin|ping|po|pu|qi|qia|qian|qiang|qiao|qie|qin|qing|qiong|qiu|qu|quan|que|qun|ran|rang" .                "|rao|re|ren|reng|ri|rong|rou|ru|ruan|rui|run|ruo|sa|sai|san|sang|sao|se|sen|seng|sha|shai|shan|shang|shao|" .                "she|shen|sheng|shi|shou|shu|shua|shuai|shuan|shuang|shui|shun|shuo|si|song|sou|su|suan|sui|sun|suo|ta|tai|" .                "tan|tang|tao|te|teng|ti|tian|tiao|tie|ting|tong|tou|tu|tuan|tui|tun|tuo|wa|wai|wan|wang|wei|wen|weng|wo|wu" .                "|xi|xia|xian|xiang|xiao|xie|xin|xing|xiong|xiu|xu|xuan|xue|xun|ya|yan|yang|yao|ye|yi|yin|ying|yo|yong|you" .                "|yu|yuan|yue|yun|za|zai|zan|zang|zao|ze|zei|zen|zeng|zha|zhai|zhan|zhang|zhao|zhe|zhen|zheng|zhi|zhong|" .                "zhou|zhu|zhua|zhuai|zhuan|zhuang|zhui|zhun|zhuo|zi|zong|zou|zu|zuan|zui|zun|zuo";        $_DataValue = "-20319|-20317|-20304|-20295|-20292|-20283|-20265|-20257|-20242|-20230|-20051|-20036|-20032|-20026|-20002|-19990" .                "|-19986|-19982|-19976|-19805|-19784|-19775|-19774|-19763|-19756|-19751|-19746|-19741|-19739|-19728|-19725" .                "|-19715|-19540|-19531|-19525|-19515|-19500|-19484|-19479|-19467|-19289|-19288|-19281|-19275|-19270|-19263" .                "|-19261|-19249|-19243|-19242|-19238|-19235|-19227|-19224|-19218|-19212|-19038|-19023|-19018|-19006|-19003" .                "|-18996|-18977|-18961|-18952|-18783|-18774|-18773|-18763|-18756|-18741|-18735|-18731|-18722|-18710|-18697" .                "|-18696|-18526|-18518|-18501|-18490|-18478|-18463|-18448|-18447|-18446|-18239|-18237|-18231|-18220|-18211" .                "|-18201|-18184|-18183|-18181|-18012|-17997|-17988|-17970|-17964|-17961|-17950|-17947|-17931|-17928|-17922" .                "|-17759|-17752|-17733|-17730|-17721|-17703|-17701|-17697|-17692|-17683|-17676|-17496|-17487|-17482|-17468" .                "|-17454|-17433|-17427|-17417|-17202|-17185|-16983|-16970|-16942|-16915|-16733|-16708|-16706|-16689|-16664" .                "|-16657|-16647|-16474|-16470|-16465|-16459|-16452|-16448|-16433|-16429|-16427|-16423|-16419|-16412|-16407" .                "|-16403|-16401|-16393|-16220|-16216|-16212|-16205|-16202|-16187|-16180|-16171|-16169|-16158|-16155|-15959" .                "|-15958|-15944|-15933|-15920|-15915|-15903|-15889|-15878|-15707|-15701|-15681|-15667|-15661|-15659|-15652" .                "|-15640|-15631|-15625|-15454|-15448|-15436|-15435|-15419|-15416|-15408|-15394|-15385|-15377|-15375|-15369" .                "|-15363|-15362|-15183|-15180|-15165|-15158|-15153|-15150|-15149|-15144|-15143|-15141|-15140|-15139|-15128" .                "|-15121|-15119|-15117|-15110|-15109|-14941|-14937|-14933|-14930|-14929|-14928|-14926|-14922|-14921|-14914" .                "|-14908|-14902|-14894|-14889|-14882|-14873|-14871|-14857|-14678|-14674|-14670|-14668|-14663|-14654|-14645" .                "|-14630|-14594|-14429|-14407|-14399|-14384|-14379|-14368|-14355|-14353|-14345|-14170|-14159|-14151|-14149" .                "|-14145|-14140|-14137|-14135|-14125|-14123|-14122|-14112|-14109|-14099|-14097|-14094|-14092|-14090|-14087" .                "|-14083|-13917|-13914|-13910|-13907|-13906|-13905|-13896|-13894|-13878|-13870|-13859|-13847|-13831|-13658" .                "|-13611|-13601|-13406|-13404|-13400|-13398|-13395|-13391|-13387|-13383|-13367|-13359|-13356|-13343|-13340" .                "|-13329|-13326|-13318|-13147|-13138|-13120|-13107|-13096|-13095|-13091|-13076|-13068|-13063|-13060|-12888" .                "|-12875|-12871|-12860|-12858|-12852|-12849|-12838|-12831|-12829|-12812|-12802|-12607|-12597|-12594|-12585" .                "|-12556|-12359|-12346|-12320|-12300|-12120|-12099|-12089|-12074|-12067|-12058|-12039|-11867|-11861|-11847" .                "|-11831|-11798|-11781|-11604|-11589|-11536|-11358|-11340|-11339|-11324|-11303|-11097|-11077|-11067|-11055" .                "|-11052|-11045|-11041|-11038|-11024|-11020|-11019|-11018|-11014|-10838|-10832|-10815|-10800|-10790|-10780" .                "|-10764|-10587|-10544|-10533|-10519|-10331|-10329|-10328|-10322|-10315|-10309|-10307|-10296|-10281|-10274" .                "|-10270|-10262|-10260|-10256|-10254";        $_TDataKey = explode('|', $_DataKey);        $_TDataValue = explode('|', $_DataValue);        $_Data = array_combine($_TDataKey, $_TDataValue);        arsort($_Data);        reset($_Data);        if ($_Code != 'gb2312')            $_String = self::_U2_Utf8_Gb($_String);        $_Res = '';        for ($i = 0; $i < strlen($_String); $i++) {            $_P = ord(substr($_String, $i, 1));            if ($_P > 160) {                $_Q = ord(substr($_String, ++$i, 1));                $_P = $_P * 256 + $_Q - 65536;            }            $_Res .= self::_Pinyin($_P, $_Data);        }        return preg_replace("/[^a-z0-9]*/", '', $_Res);    }    public static function _Pinyin($_Num, $_Data) {        if ($_Num > 0 && $_Num < 160) {            return chr($_Num);        } elseif ($_Num < -20319 || $_Num > -10247) {            return '';        } else {            foreach ($_Data as $k => $v) {                if ($v <= $_Num)                    break;            }            return $k;        }    }    public static function _U2_Utf8_Gb($_C) {        $_String = '';        if ($_C < 0x80) {            $_String .= $_C;        } elseif ($_C < 0x800) {            $_String .= chr(0xC0 | $_C >> 6);            $_String .= chr(0x80 | $_C & 0x3F);        } elseif ($_C < 0x10000) {            $_String .= chr(0xE0 | $_C >> 12);            $_String .= chr(0x80 | $_C >> 6 & 0x3F);            $_String .= chr(0x80 | $_C & 0x3F);        } elseif ($_C < 0x200000) {            $_String .= chr(0xF0 | $_C >> 18);            $_String .= chr(0x80 | $_C >> 12 & 0x3F);            $_String .= chr(0x80 | $_C >> 6 & 0x3F);            $_String .= chr(0x80 | $_C & 0x3F);        }        return iconv('UTF-8', 'GB2312', $_String);    }    private static function getfirstchar($s0) {        $fchar = ord($s0{0});        if ($fchar >= ord("A") and $fchar <= ord("z"))            return strtoupper($s0{0});        $s1 = iconv("UTF-8", "gb2312", $s0);        $s2 = iconv("gb2312", "UTF-8", $s1);        if ($s2 == $s0) {            $s = $s1;        } else {            $s = $s0;        }//        $asc = ord($s{0}) * 256 + ord($s{1}) - 65536;        $asc = $fchar * 256 + ord($s{1}) - 65536;        if ($asc >= -20319 and $asc <= -20284)            return "A";        if ($asc >= -20283 and $asc <= -19776)            return "B";        if ($asc >= -19775 and $asc <= -19219)            return "C";        if ($asc >= -19218 and $asc <= -18711)            return "D";        if ($asc >= -18710 and $asc <= -18527)            return "E";        if ($asc >= -18526 and $asc <= -18240)            return "F";        if ($asc >= -18239 and $asc <= -17923)            return "G";        if ($asc >= -17922 and $asc <= -17418)            return "H";        if ($asc >= -17417 and $asc <= -16475)            return "J";        if ($asc >= -16474 and $asc <= -16213)            return "K";        if ($asc >= -16212 and $asc <= -15641)            return "L";        if ($asc >= -15640 and $asc <= -15166)            return "M";        if ($asc >= -15165 and $asc <= -14923)            return "N";        if ($asc >= -14922 and $asc <= -14915)            return "O";        if ($asc >= -14914 and $asc <= -14631)            return "P";        if ($asc >= -14630 and $asc <= -14150)            return "Q";        if ($asc >= -14149 and $asc <= -14091)            return "R";        if ($asc >= -14090 and $asc <= -13319)            return "S";        if ($asc >= -13318 and $asc <= -12839)            return "T";        if ($asc >= -12838 and $asc <= -12557)            return "W";        if ($asc >= -12556 and $asc <= -11848)            return "X";        if ($asc >= -11847 and $asc <= -11056)            return "Y";        if ($asc >= -11055 and $asc <= -10247)            return "Z";        return null;    }    public static function pinyin1($zh) {        $ret = "";        $s1 = iconv("UTF-8", "gb2312", $zh);        $s2 = iconv("gb2312", "UTF-8", $s1);        if ($s2 == $zh) {            $zh = $s1;        }        for ($i = 0; $i < strlen($zh); $i++) {            $s1 = substr($zh, $i, 1);            $p = ord($s1);            if ($p > 160) {                $s2 = substr($zh, $i++, 2);                $ret .=self::getfirstchar($s2);            } else {                $ret .= $s1;            }        }        return $ret;    }    /**     * 把数组所有元素，按照“参数=参数值”的模式用“&”字符拼接成字符串     * @param $para 需要拼接的数组     * return 拼接完成以后的字符串     */    function createLinkstring($para) {        $arg = "";        while (list ($key, $val) = each($para)) {            $arg.=$key . "=" . $val . "&";        }        //去掉最后一个&字符        $arg = substr($arg, 0, count($arg) - 2);        //如果存在转义字符，那么去掉转义        if (get_magic_quotes_gpc()) {            $arg = stripslashes($arg);        }        return $arg;    }    /**     * 取文件最后$n行     * @param string $filename 文件路径     * @param int $n 最后几行     * @return mixed false表示有错误，成功则返回字符串     */    public static function FileLastLines($filename, $n) {        if (!$fp = @fopen($filename, 'r')) {            echo "打开文件失败，请检查文件路径是否正确，路径和文件名不要包含中文";            echo "<br />";            echo $filename;            return false;        }        $pos = -2;        $eof = "";        $str = "";        while ($n > 0) {            while ($eof != "\n") {                if (!fseek($fp, $pos, SEEK_END)) {                    $eof = fgetc($fp);                    $pos--;                } else {                    break;                }            }            $str = fgets($fp) . $str;            $eof = "";            $n--;        }        return $str;    }    /**     * 截取长字符串,显示为<a title="str-str">str</a>     */    public static function strturntagA($str, $start = 0, $length = 10, $omit = '...', $url = '', $target = '_blank', $flag = true) {        if (!$str)            return null;        $newstr = F::subString($str, $start, $length);        if ($url)            $a = '<a title="' . $str . '" href="' . $url . '" target="' . $target . '">';        else            $a = '<a title="' . $str . '">';        if ($flag)            $a.=$newstr . $omit . '</a>';        else            $a.=$newstr . '</a>';        return $a;    }    public static function createMallUrl($rote, $params) {        if (!empty($params)) {            foreach ($params as $key => $val) {                $urlParams[] = "$key=$val";            }            $urlParam = implode($urlParams, "&");            return $rote . "?" . $urlParam;        } else {            return $rote;        }    }    public static function getoperation($url, $info, $params) {        //商城车型参数        $vehicle=self::shoplog();        !empty($vehicle)?$params['vehicle']=$vehicle:'';        $organID = Yii::app()->user->getOrganID();        $time = time();        $identity = Yii::app()->user->getIdentity();        $organ = self::getOrgan($organID);        if (is_array($organ)) {            $organname = $organ['OrganName'];        }        $userid = Yii::app()->user->id;        $username = Yii::app()->user->name;        //查询url_info中的url地址描述        $res = Yii::app()->mongodb->getDbInstance()->url_info->findOne(array("url" => $url));        if ($res['info']) {            $info = $res['info'];        }else if($res['info']==null ||!isset($res['info']) || empty($res['info'])){            $info ='';        }        //获取身份        $identity=self::identilog($identity);        //插入用户操作日志列表        $arr = array(            'UserID' => $userid,            'UserName' => $username,            'OrganID' => $organID,            'OrganName' => $organname,            'Identity' => $identity,            'Url' => $url,            'Params' => $params,            'Info' => $info,            'CreateTime' => $time,        );        $collection = Yii::app()->mongodb->getDbInstance()->user_operation->insert($arr);        return $collection;    }    public  static function identilog($identity){          switch ($identity) {            case 'servicer':                $identity = 3;                break;            case 'dealer':                $identity = 2;                break;            case 'maker':                $identity = 1;                break;        }        return $identity;    }    //获取商城车型    public static function shoplog(){        $controller=Yii::app()->controller->id;        $cookie = Yii::app()->request->getCookies();        $car = array('make' => $cookie['mallmake']->value, 'series' => $cookie['mallseries']->value, 'year' => $cookie['mallyear']->value, 'model' => $cookie['mallmodel']->value);        $carmodeltext = MallService::getCarmodeltxt($car);        if(in_array($controller,array('home','mall','sellerstore'))){         return  !empty($carmodeltext)?$params['vehicle']= $carmodeltext:'';         }          }    public static function getOrgan($organID) {         $organInfo = Organ::model()->findByPk($organID)->attributes;         return $organInfo;    }    /*     * 发送短信     * 参数内容如下     * $params=array(     *     'phone'=>'15377089090',    //接收者号码,如果有多个号码用逗号隔开,必填     *     'msg'=>'发送内容',          //发送内容,必填,少于700个字符     *     'SerialNumber'=>'',        //流水号，20位数字，唯一;可不填     *     'ScheduleTime'=>'',        //发送时间,为空表示立即发送,格式如:20090901010101;可不填     *     'ExtendAccessNum'=>'',     //接入号扩展号;可不填     *     'f'=>''                    //f不为1 或该参数不存在 -- 提交号码中只要有无效的号码，那么所有的号码都不发出短信，所有的号码在返回参数faillist中列出     *                                   f为1 表示提交号码中有效的号码仍正常发出短信，无效的号码在返回参数faillist中列出;可不填     *   );       *   调用事例:     *    F::sendSMS(array('msg'=>'测试短信','phone'=>'15377087890'))     */    public static function sendSMS($params) {        $smsparams=Yii::app()->params['SMS'];        if($smsparams&&$smsparams['open']===false){            return array('code'=>'-2','SMS'=>'嘉配关闭短信提醒');        }        $MessageContent = $params['msg'];        $UserNumber = $params['phone'];        $SerialNumber = $params['SerialNumber'] ? $params['SerialNumber'] : '';        $ScheduleTime = $params['ScheduleTime'] ? $params['ScheduleTime'] : '';        $ExtendAccessNum = $params['ExtendAccessNum'] ? $params['ExtendAccessNum'] : '';        $f = $params['f'] ? $params['f'] : '1';        return SMS::sendMessage(self::$SpCode, self::$LoginName, self::$Password, $MessageContent, $UserNumber, $SerialNumber, $ScheduleTime, $ExtendAccessNum, $f);    }    /*     *  获取短信回复信息     *  调用方法     *  F::getReplyMessage('15377076988');  //返回电话为 15377076988  的回复信息(所有)     *  如果$phone为空,返回所有回复但未确认的信息     */    public static function getReplyMessage($phone = '') {        //获取所有回复内容        $r = SMS::getReplyMessage(self::$SpCode, self::$LoginName, self::$Password);        $lists = array();        if($r['error']){            return $r;        }        if ($r['code'] == 0) {            if (isset($r['data']['replys']))                $reply = $r['data']['replys'];            else                $reply = array();            if ($phone) {                foreach ($reply as $v) {                    if ($v['mdn'] == $phone) {                        $lists[] = $v;                    }                }            } else {                $lists = $r['data'];            }        } else {            $lists=$r;        }        return $lists;    }    /*     * 短信回复确认     * 调用方法     * F::ConfirmReplyMessage('20012');  //确认信息后就不能用getReplyMessage获取这个id之前的回复信息了     * 20012指的是 getReplyMessage 返回的数组中的 id;     */    public static function ConfirmReplyMessage($id) {        //确认回复内容        $r = SMS::getReplyConfirmMessage(self::$SpCode, self::$LoginName, self::$Password, $id);        return $r;    }    //返回错误信息    public static function getMessage() {        $r = SMS::getMessage(self::$SpCode, self::$LoginName, self::$Password);        return $r;    }    //短信剩余条数查询    public static function getRemainNum() {        $r = SMS::getRemainNum(self::$SpCode, self::$LoginName, self::$Password);        return $r;    }    //获取IP地址    public static function get_client_ip() {        if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown"))            $ip = getenv("HTTP_CLIENT_IP");        else if (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown"))            $ip = getenv("HTTP_X_FORWARDED_FOR");        else if (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown"))            $ip = getenv("REMOTE_ADDR");        else if (isset($_SERVER['REMOTE_ADDR']) &&                $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], "unknown"))            $ip = $_SERVER['REMOTE_ADDR'];        else            $ip = "unknown";        return ($ip);    }    //获取跟菜单目录     public static function getroot() {        if (Yii::app()->user->isMaker()) {            $rootID = 1;        } else if (Yii::app()->user->isDealer()) {            $menu=DefaultService::getmenu('经销商菜单');            if($menu)            $rootID =$menu['ID'] ;            //$rootID = 2;        } else if (Yii::app()->user->isServicer()) {            $menu=DefaultService::getmenu('修理厂菜单');            if($menu)            $rootID =$menu['ID'] ;        }        return $rootID;    }        /**     *      * @param type $url     * @param array      * @param type $goodsnum     * @return type     *mongodb用户查询商城商品查询     */        public static function goods_operation($url,$params,$goodsnum){        $vehicle=self::shoplog();        !empty($vehicle)?$params['vehicle']=$vehicle:'';        $organID = Yii::app()->user->getOrganID();        $time = time();        $identity = Yii::app()->user->getIdentity();        $organ = self::getOrgan($organID);        if (is_array($organ)) {            $organname = $organ['OrganName'];        }        $userid = Yii::app()->user->id;        $username = Yii::app()->user->name;        //获取身份        $identity=self::identilog($identity);        //插入用户操作日志列表        $arr = array(            'UserID' => $userid,            'UserName' => $username,            'OrganID' => $organID,            'OrganName' => $organname,            'Identity' => $identity,            'Url' => $url,            'GoodsNum'=>$goodsnum,            'Params' => $params,            'CreateTime' => $time,        );        $collection = Yii::app()->mongodb->getDbInstance()->user_operation_goods->insert($arr);        return $collection;    } }